contents
 
<button id='BBT'>OK</button><button id='BBT'>Reset</button></div>
</>
 
<div id='All'>
 
<div id='All'><input id='Input' name='Input'></input><button id='BBT'>OK</button><button id='BBT'>Reset</button></div>
<div id='All'><input id='Input' name='Input'></input><button id='BBT'>OK</button><button id='BBT'>Reset</button></div>
 
<CRUDList/>
 
<Person/>
 
onClick={TotalReset}
 
 onClick={TrueSetInput}
 
value={nn} onChange={FakeSetInput}
 
</div>
 
<div>
 
<input id='AddInput'></input>
<button id='AddInput'>Add Input</button>
 
/*
const Input = ({size,setSize,PartialReset}) => {
    const [nn,setNn]=useState(size)
    function TotalReset(){
        window.location.reload();
    }
    function TrueSetInput(){
        // https://stackoverflow.com/questions/11563638/how-do-i-get-the-value-of-text-input-field-using-javascript
        setSize(document.getElementById('Input').value)
        PartialReset()
    }
    function FakeSetInput(event){
        // https://bobbyhadz.com/blog/react-set-default-value-of-input
        setNn(event.target.value)
    }
    return (
<>
<div id='All'><input id='Input' name='Input' value={nn} onChange={FakeSetInput}></input><button id='BBT' onClick={TrueSetInput}>OK</button><button id='BBT' onClick={TotalReset}>Reset</button></div>
</>
    )
}
*/
 
</td>
 
</table>
 
<table>
<tr>
    <th>Name</th>
    <th>Age</th>
    <th>Gender</th>
    <th>Edit</th>
    <th>Delete</th>
</tr>
 
<Input/>
 
<div id='All'><h1 class='BBT'>Hello</h1><h1 class='BBT'>Hello</h1><button class='BBT'>Edit</button></div>
 
<button class='BBT'>Delete</button>
 
<table>
        <tr>
            <th>Name</th>
            <th>Age</th>
            <th>Gender</th>
        </tr>
        <tr>
            <td>Anom</td>
            <td>19</td>
            <td>Male</td>
        </tr>
        <tr>
            <td>Megha</td>
            <td>19</td>
            <td>Female</td>
        </tr>
        <tr>
            <td>Subham</td>
            <td>25</td>
            <td>Male</td>
        </tr>
    </table>
 
    width:10px;
 
border-
 
</div>
 
*/
 
    display: inline-block;
 
    display: inline-block;
 
    display: inline-block;
 
<input id='Input' name='Input'></input>
 
onClick={TotalReset}
 
onClick={TrueSetInput}
 
value={nn} onChange={FakeSetInput}
 
{size,setSize,PartialReset}
 
    const [nn,setNn]=useState(size)
    function TotalReset(){
        window.location.reload();
    }
    function TrueSetInput(){
        // https://stackoverflow.com/questions/11563638/how-do-i-get-the-value-of-text-input-field-using-javascript
        setSize(document.getElementById('Input').value)
        PartialReset()
    }
    function FakeSetInput(event){
        // https://bobbyhadz.com/blog/react-set-default-value-of-input
        setNn(event.target.value)
    }
 
value={nn} onChange={FakeSetInput}
 
{size,setSize,PartialReset}
 
    const [nn,setNn]=useState(size)
    function TotalReset(){
        window.location.reload();
    }
    function TrueSetInput(){
        // https://stackoverflow.com/questions/11563638/how-do-i-get-the-value-of-text-input-field-using-javascript
        setSize(document.getElementById('Input').value)
        PartialReset()
    }
    function FakeSetInput(event){
        // https://bobbyhadz.com/blog/react-set-default-value-of-input
        setNn(event.target.value)
    }
 
        // Add a Service Button
 
{/* Right UI Side */}
 
{/* Left UI Side */}
 
{/* HTML Tag for CSS */}
 
{/* Left UI Side */}
 
</>
 
      
 
      
 
      
 
    
 
    
 
        
 
      
 
    
 
/*
 
      <div className="output">
 
      </div>
 
    <form className="App" autoComplete="off">
      <div className="form-field">
 
      </div>
    </form>
 
</>
 
    let List;
 
    <ul>{listItems}</ul>
 
    const people = [{
  id: 0,
  name: 'Creola Katherine Johnson',
  profession: 'mathematician',
}, {
  id: 1,
  name: 'Mario José Molina-Pasquel Henríquez',
  profession: 'chemist',
}, {
  id: 2,
  name: 'Mohammad Abdus Salam',
  profession: 'physicist',
}, {
  name: 'Percy Lavon Julian',
  profession: 'chemist',  
}, {
  name: 'Subrahmanyan Chandrasekhar',
  profession: 'astrophysicist',
}];
    const listItems = people.map(person =>
  <li>
     <p>
       <b>{person.name}:</b>
       {' ' + person.profession + ' '}
     </p>
  </li>
);
 
    let TimeLine=[]
    let TimeLines=[]
    TimeLine.push(<History key={0} size={size} message={'Start Game'}/>)
    TimeLines.push(<div id={'TimeLines'}>{TimeLine}</div>)
 
+i.toString()
 
]}</div>
 
<div id={'TimeLine'}>{[
 
TimeLine.push(
 
Start Game
 

    }]

 
    let TimeLine = [{
        id: 0,
        name: 'Start Game',
        state: List,
 
    // let List=[]
    // for (let i = 0; i < size; i++) {
    //     let Column=[]
    // for (let j = 0; j < size; j++) {
    //     Column.push(document.getElementById('Square['+i.toString()+','+j.toString()+']').textContent)
    // }
    //     List.push(Column)        
    // }
    // alert(List)

 
// https://www.w3schools.com/jsref/prop_node_childnodes.asp
    // https://stackoverflow.com/questions/13063801/find-a-nested-div-tag
    // https://www.w3schools.com/jsref/prop_node_textcontent.asp
 

    const chemists = people.filter(person =>
  person.profession === 'chemist'
);
 
       known for {person.accomplishment}
 
     <img
       alt={person.name}
     />
 
       src={getImageUrl(person)}
 
    
    <button id='BBT' //onClick={TotalReset}
    >
        Show
    </button>
 
<History size={size}/>
<History size={size}/>
 
let List=[]
 
let List=[]
 
n
 
//alert(document.getElementById('DivSquare').childNodes.length)
 
.textContent
 
.childNodes.length
 
.childNodes
 
length
 
.childNodes
 
.length
 
.childNodes
 
.childNodes
 
.childNodes.length
 
</div>
 
    display: inline-block;
 
    display: inline-block;
 
*/
 
const Body=({n2,XO,setXO,Handle})=>{
    return(
<>
<hr/>
<SquareS size={n2} XO={XO} setXO={setXO}/>
<button onClick={Handle} XO={XO} setXO={setXO}>XO state Check</button>
<hr/>
<h1>Next player: X</h1>
<History/>
</>
    )
}
 
export default History
 
<div id='All'>
    <button 
        id='BBT' 
        //onClick={TrueSetInput}
    >
        Turn 000
    </button>
    
    <button id='BBT' //onClick={TotalReset}
    >
        Show
    </button>
    </div>
 
    <input id='Input' name='Input' value={nn} onChange={FakeSetInput}></input>
 
===undefined
 
Total
 
<div id='Body'>
    
    <SquareS size={n2} XO={XO} setXO={setXO}/>
    <button onClick={Handle} XO={XO} setXO={setXO}>XO state Check</button>
    <hr/>
    <h1>Next player: X</h1>
    <History/>
</div>
 
<hr/>
 
    function ShowInput(){alert(nn)}
 
<button onClick={ShowInput}>ShowInput</button>
 
</>
 
</div>
 
value={3}
 
n2,
 
n2,
 
n2,
 
    const size=3;
 
    const n2 = N2
 
const N2 = () => {
    // https://react.dev/learn/reusing-logic-with-custom-hooks
    const [value, setValue] = useState(); 
    function handleChange(e) {
      setValue(e.target.value);
    } 
    const inputProps = {
      value: value,
      onChange: handleChange
    };    
    return inputProps;
}
 
{...n2}
 
initialValue
 
    function ResetClick()
 
    alert(XO)
 
XO={XO}
 
    else{
        setText('-');
        setActivate(true);
    };
 
XO
 
,XO,setXO
 
XO===undefined || 
 
 || XO===true
 
    
 
      
 
    elif (){
      WriteButton('X',true)
    }
 
    useEffect(()=>{
        const LOL='O'
        setXO(LOL)
    },[]);
 
'O'
 
        //const LOL='O'
        //setXO(LOL)
 
bool)
      setXO(
 
        setXO('X')
 
        setXO('O')
 
        alert(XO)
 

    const LOL='O'
    setXO(LOL)
 
        const LOL='O'
setXO(LOL)
        const LOL='O'
setXO(LOL)
        const LOL='O'
setXO(LOL)
 
    setXO('O')
 
props.
 
props.
 
        alert(XO)
 
    let message='X';
    if(XO){
        message='X';}
    else{
        message='O';}
 
setX0('O')
 
text
 

  function handleClick() {
  }
 
      if (X0) {
        WriteButton('X');
        
      }
      else    {
        WriteButton('O');
        
      }
 
'X'
 
 message={message}
 
message,
 
key={index}
 
 message={message}
 
 activate={activate}
 
,message
 
  let ModCount=0
 
        alert(activate)
 
        alert(activate)
 
if(activate===true){
        alert(activate)
        setText('X');
        setActivate(false);
      }
      else{
        alert(activate)
        setText('-');
        setActivate(true);
      };
      //ModCount+=1
      //if(ModCount===0){alert(ModCount)}
      //if(ModCount===1){alert(ModCount)}
      //if(ModCount===2){alert(ModCount)}
      //if(ModCount===3){alert(ModCount)}
 
  function WriteButton(){
    if(activate===true){
        alert(activate)
        setText('X');
        setActivate(false);
    }
    else{
        alert(activate)
        setText('-');
        setActivate(true);
    };
  }
 
,useEffect
 
  useEffect(() => {
  setActivate(tr)
  }, []);
 
import { useEffect } from 'react';
 
       activate=true;
 
        activate=false;
 
  let activate=false;
 
,activate
 
 activate={false}
 
message
 
ModCount+=1
 
ModCount+=1
 
let ModCount=0
 
ModCount+=1
 
let ModCount=0
 
        ModCount+=1
 
ModCount+=1
 
      if(activate){
        setText(message);
        activate=false;
        setXO(false);
      }
      else{
        setText('-');
        activate=true;
        setXO(true);
      };
 
,activate
 
        setXO(false)
 
        setXO(true)
 
    */
 
    /*
 
    const [text,setText]=useState(true)
 
    <Diculator/>
 
/*
 
*/}
 
</>
 
,setDo
 
<>
<input></input>
<button>OK</button>
<button>Reset</button>

 
    
 
 
 
===true
 
/*
To Do List
1. ToeTacTic
 * Marked Button
2. Linear Algebra Calculator
 * Matrix Multiplication Calculator (+,\cdot,\odot)
 * Determinant
 * Eigan Vector and Eigan Value
 * Singular Value Decomposition
 * Gaussian elimination
 * Matrix Taylor Series
3. Convey Game
4. Pages
5. CSS
6. Read the Document
*/
 
    const message='David';
 
    function handleClick() {
        alert('Hello');
    }
 
 onClick={handleClick}
 
 onClick={handleClick}
 
    function handleClick() {
        alert('Hello');
    }
 
document.getElementById('Square'+id.toString()).style.color = 'red';
 
document.getElementById('Square'+id.toString()).style.color = 'black';
 
        text='';
 
        text='X';
 
const MyButton = ({ name, onClick , num }) => {
  if (num===undefined){num=name}
  function handleClick() {
    onClick(num);
  }
  return (
    <button onClick={handleClick}>
      {/* https://youtu.be/t6L2ZArc8Cs?si=4zbs4brUqDoop2Qo */}
      {name}
    </button>
  );
}
 
        text='O'
 
 text=''
 
,text
 
{}
 
  function ChangeColor() {
    if()
  }
 
 onClick 
 
activate
 
        
 
activate=true;
 
activate=false;
 
        
 
      
 
        
 
 activate={activate}
 
<input></input>
<button>OK</button>
<button>Reset</button>
 
    font-size: 40px;
 
eft:10px;
 
/*
 
    color: red;
 
<input></input>
<button>OK</button>
<button>Reset</button>
<SquareS/>
<h1>Next player: X</h1>
 
 {operate} <h1 id='B'>{B}</h1>  = {C}
 
id='A'
 
 id='All'
 
<h1>Next player: X</h1>
 
Square
 
quare
 
{SquareS}
 
import TicTacToe from './component/TicTacToe'
 
    function clickSquare(){alert('Hello')}
    const DivSquare = [];
    const size=3
    for (let i = 0; i < size; i++) {
        let lineSquare=[]
    for (let j = 0; j < size; j++) {
        // https://stackoverflow.com/questions/22876978/loop-inside-react-jsx
        // https://reactjs.org/docs/lists-and-keys.html
        let index=i.toString()+','+j.toString()
        lineSquare.push(<Square key={index} id={index} onClick={clickSquare} activate={false}/>)
    }
        DivSquare.push(<div id={'DivSquare'+i.toString()}>{lineSquare}</div>)
        // https://stackoverflow.com/questions/42790969/idiomatic-way-to-append-an-element-in-jsx
}
 
import Square from './Square'


export default TicTacToe
 
const SquareS = () => {
    function clickSquare(){alert('Hello')}
    const DivSquare = [];
    const size=3
    for (let i = 0; i < size; i++) {
        let lineSquare=[]
    for (let j = 0; j < size; j++) {
        // https://stackoverflow.com/questions/22876978/loop-inside-react-jsx
        // https://reactjs.org/docs/lists-and-keys.html
        let index=i.toString()+','+j.toString()
        lineSquare.push(<Square key={index} id={index} onClick={clickSquare} activate={false}/>)
    }
        DivSquare.push(<div id={'DivSquare'+i.toString()}>{lineSquare}</div>)
        // https://stackoverflow.com/questions/42790969/idiomatic-way-to-append-an-element-in-jsx
}

    return (
<>
{DivSquare}
</>
    )
}
 
  //const styleObj = {
  //  // https://www.pluralsight.com/guides/react-inline-styling
  //  fontSize: 14,
  //  color: "#4a54f1",
  //  textAlign: "center",
  //  paddingTop: "100px",
  // }
 
/component
 
    display: grid;
    grid-template-columns: repeat(3, 3fr);
    justify-content: center;
    align-items: center;
 
    justify-content: center;
    align-items: center;
 
    
 
    display: grid;
    grid-template-columns: repeat(3, 5vw);
        grid-template-rows: repeat(3, 5vw);
 
 / repeat(10, 10px);
 
            
 
, 50px 1fr
 
 button
 
 style={{styleObj}}
 
  document.getElementById('Square'+id.toString()).style.color = 'red'
 
button
 
    const listSquare = [];
 
        //listSquare.push(<Square key={index} id={index} onClick={clickSquare} activate={false}/>);
 
#DivSquare0{
    color:red;
    width:100px;
    height: 100px;
}
 

// https://react.dev/reference/react-dom/client/createRoot
 
import { createRoot } from 'react-dom/client';
 
ToeTacTi
 
list
 
list
 
        document.getElementById('S'+i.toString()).appendChild(<Square key={index} id={index} onClick={clickSquare} activate={false}/>)
 
listDivSquare.push(<div id={'S'+i.toString()}>{}</div>)
 
document.getElementById('S'+i.toString()).appendChild(listSquare[-1])
 
i.toString()
 
    
 
/>
 
const ModeH2 = ({IsLeft}) => {
  if (IsLeft)
       {return(<h2>Mode: Left </h2>)}
  else {return(<h2>Mode: Right</h2>)}
  /* https://react.dev/learn#conditional-rendering */
}

export default ModeH2
 
import { useState } from 'react';
import {Square} from './Square'
import {Board} from './Board'

export default function Game() {
  const [history, setHistory] = useState([Array(9).fill(null)]);
  const [currentMove, setCurrentMove] = useState(0);
  const xIsNext = currentMove % 2 === 0;
  const currentSquares = history[currentMove];

  function handlePlay(nextSquares) {
    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];
    setHistory(nextHistory);
    setCurrentMove(nextHistory.length - 1);
  }

  function jumpTo(nextMove) {
    setCurrentMove(nextMove);
  }

  const moves = history.map((squares, move) => {
    let description;
    if (move > 0) {
      description = 'Go to move #' + move;
    } else {
      description = 'Go to game start';
    }
    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });

  return (
    <div className="game">
      <div className="game-board">
        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />
      </div>
      <div className="game-info">
        <ol>{moves}</ol>
      </div>
    </div>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}

 
Sq
 
function Board({ xIsNext, squares, onPlay }) {
  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = 'X';
    } else {
      nextSquares[i] = 'O';
    }
    onPlay(nextSquares);
  }

  const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
  }

  return (
    <>
      <div className="status">{status}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}
 
function Square({ value, onSquareClick }) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}
 
 && B!=='0'
 
4. Utility Button
 
    setA(A.toString())
    setB(B.toString())
 
    setA(parseFloat(A))
    setB(parseFloat(B))
 
const listNumber = [];
  for (let i = 0; i < 10; i++) {
    // https://stackoverflow.com/questions/22876978/loop-inside-react-jsx
    // https://reactjs.org/docs/lists-and-keys.html
    listNumber.push(<MyButton key={i} name={i} onClick={clickNumber}/>);
}
 
function clickChoose() {
    if (Choose) 
         {setChoose(false)
          document.getElementById('A').style.color = 'black'
          document.getElementById('B').style.color = 'red'} 
    else {setChoose(true)
          document.getElementById('A').style.color = 'red'
          document.getElementById('B').style.color = 'black'}
  }

 
function clickDelete(x) {
    // https://www.w3schools.com/jsref/jsref_slice_array.asp
    if (Choose) {if (A.length==='0'){setA('0');}else{setA(A.toString().slice(0,-1));};} 
    else        {if (B.length==='0'){setB('0');}else{setB(B.toString().slice(0,-1));};}
  }
 
function clickReset() {
    if (Choose) {setA('0');}
    else        {setB('0');}
  }
 
const listNumber = [];
  for (let i = 0; i < 10; i++) {
    // https://stackoverflow.com/questions/22876978/loop-inside-react-jsx
    // https://reactjs.org/docs/lists-and-keys.html
    listNumber.push(<MyButton key={i} name={i} onClick={clickNumber}/>);
}
 
  function clickReset() {
    if (Choose) {if (A.toString().includes('.')){setA(A)}else{setA(A.toString()+'.');};} 
    else        {if (B.toString().includes('.')){setB(B)}else{setB(B.toString()+'.');};}
  }
 
;
 
1. Dot Button
 
}
h1#A{
 
color: 'red';
 
}
#A h1{
 
color:'red';
 
x
 
  function 
 
        
 
        
 
function MyButton({ name, onClick , num }) {
  if (num===undefined){num=name}
  function handleClick() {
    onClick(num);
  }
  return (
    <button onClick={handleClick}>
      {/* https://youtu.be/t6L2ZArc8Cs?si=4zbs4brUqDoop2Qo */}
      {name}
    </button>
  );
}
// https://react.dev/learn#sharing-data-between-components
 

function ModeH2({IsLeft}){
  if (IsLeft)
       {return(<h2>Mode: Left </h2>)}
  else {return(<h2>Mode: Right</h2>)}
  /* https://react.dev/learn#conditional-rendering */
}
 
function ModeButton({ name, onClick }) {
  function handleClick() {onClick();}
  return (
    <button onClick={handleClick}>
      {/* https://youtu.be/t6L2ZArc8Cs?si=4zbs4brUqDoop2Qo */}
      {name}
    </button>
  );
}
 

function ModeButton({ name, onClick }) {
  function handleClick() {onClick();}
  return (
    <button onClick={handleClick}>
      {/* https://youtu.be/t6L2ZArc8Cs?si=4zbs4brUqDoop2Qo */}
      {name}
    </button>
  );
}
 
         
 
</h1>
 
 <>
 
</>
 
<p style={{color="##FF0000"}}>
 
<p/>
 
{A}
 
</h1>
 
         
 
{IsLeft}
 
  
 
    
 
      <ModeButton name='Right' onClick={clickMode} />
 
<ModeH2 IsLeft={Choose}/>
 
Number
 
      <ModeH2 IsLeft={ChooseNumber}/>
 
Number
 
Number
 
Number
 
  let ChooseNumber=true
 
    alert(ChooseNumber)
 
  // {ChooseNumber ? 
  // return (<h2>Mode: Left </h2>)
  // return (<h2>Mode: Right</h2>)
 
}
 
    
 
  
 
/myFolder
 
import logo from './logo.svg';
 
